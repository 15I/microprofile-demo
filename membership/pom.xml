<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>com.github.phillip-kruger</groupId>
        <artifactId>microprofile-demo</artifactId>
        <version>1.0.0-SNAPSHOT</version>
        <relativePath>../</relativePath>
    </parent>
    
    <groupId>com.github.phillip-kruger.microprofile-demo</groupId>
    <artifactId>membership</artifactId>
    <packaging>war</packaging>
    
    <name>Microprofile Demo :: Membership</name>
    
    <properties>
        <!-- payara-micro properties -->
        <payara-micro.maven.version>1.0.0</payara-micro.maven.version>
        <payara-micro.version>5.183</payara-micro.version>
        <payara-micro.http.port>8080</payara-micro.http.port>
        <payara-micro.https.port>8443</payara-micro.https.port>
        <payara-micro.installDir>${java.io.tmpdir}${file.separator}${project.artifactId}${file.separator}payara-micro</payara-micro.installDir>
        <payara-micro.deployDir>${payara-micro.installDir}${file.separator}autodeploy</payara-micro.deployDir>
        <payara-micro.configDir>${basedir}${file.separator}src${file.separator}main${file.separator}payara-micro${file.separator}config</payara-micro.configDir>
        <payara-micro.logsDir>${payara-micro.installDir}${file.separator}logs</payara-micro.logsDir>
        <payara-micro.logfile>${payara-micro.logsDir}${file.separator}server.log</payara-micro.logfile>
        
        <mysql.version>8.0.12</mysql.version>
    </properties>
    
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>fish.payara.extras</groupId>
                <artifactId>payara-micro</artifactId>
                <version>${payara-micro.version}</version>
                <scope>provided</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>
    
    <dependencies>
        <!-- Payara -->
        <dependency>
            <groupId>fish.payara.extras</groupId>
            <artifactId>payara-micro</artifactId>
            <scope>provided</scope>
        </dependency>
        
        <!-- Database -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>${mysql.version}</version>
        </dependency>
        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <version>1.4.197</version>
        </dependency>
        
        
        <!-- Microprofile Health ext -->
        <dependency>
            <groupId>org.microprofile-ext.health-ext</groupId>
            <artifactId>healthprobe-system</artifactId>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>org.microprofile-ext.health-ext</groupId>
            <artifactId>healthprobe-jvm</artifactId>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>org.microprofile-ext.health-ext</groupId>
            <artifactId>health-ui</artifactId>
            <scope>runtime</scope>
        </dependency>
        
        <!-- JAX-RS Exception handlers -->
        <dependency>
            <groupId>org.microprofile-ext.jaxrs-ext</groupId>
            <artifactId>configurable-exception-handler</artifactId>
            <scope>runtime</scope>   
        </dependency>
        <dependency>
            <groupId>org.microprofile-ext.jaxrs-ext</groupId>
            <artifactId>beanvalidation-exception-handler</artifactId>
            <scope>runtime</scope>
        </dependency>
        
        <!-- JWT ext -->
        <dependency>
            <groupId>com.github.phillip-kruger.microprofile-extensions</groupId>
            <artifactId>jwt-user-ext</artifactId>
        </dependency>
        
        <!--Config Memory source--> 
        <dependency>
            <groupId>org.microprofile-ext.config-ext</groupId>
            <artifactId>configsource-memory</artifactId>
            <scope>runtime</scope>
        </dependency>
        
        <!-- Swagger UI -->
        <dependency>
            <groupId>org.microprofile-ext.openapi-ext</groupId>
            <artifactId>swagger-ui</artifactId>
            <scope>runtime</scope>
        </dependency>
    </dependencies>
    
    
    <build>
        <plugins>
            <plugin>
                <groupId>fish.payara.maven.plugins</groupId>
                <artifactId>payara-micro-maven-plugin</artifactId>
                <version>${payara-micro.maven.version}</version>
                <configuration>
                    <artifactItem>
                        <groupId>fish.payara.extras</groupId>
                        <artifactId>payara-micro</artifactId>
                        <version>${payara-micro.version}</version>
                    </artifactItem>
                    <payaraVersion>${payara-micro.version}</payaraVersion>
                    <commandLineOptions>
                        
                        <option>
                            <key>--port</key>
                            <value>${payara-micro.http.port}</value>
                        </option>
                        <option>
                            <key>--sslport</key>
                            <value>${payara-micro.https.port}</value>
                        </option>
                        <option>
                            <key>--deploymentdir</key>
                            <value>${payara-micro.deployDir}</value>
                        </option>
                        
                        <option>
                            <key>--rootdir</key>
                            <value>${payara-micro.installDir}</value>
                        </option>
<!--                        <option>
                            <key>-domainconfig</key>
                            <value>${project.build.directory}/domain.xml</value>
                        </option>-->
                        
                    </commandLineOptions>
                    
                    <deployArtifacts>
                        <artifactItem>
                            <groupId>${project.groupId}</groupId>
                            <artifactId>${project.artifactId}</artifactId>
                            <version>${project.version}</version>
                            <type>${project.packaging}</type>
                        </artifactItem>                       
                    </deployArtifacts>
                </configuration>
            </plugin>
        </plugins>
    </build>
    
    <profiles>
        
        <profile>
            <id>run</id>
            <activation>
                <property>
                    <name>run</name>
                </property>
            </activation>
            
            <build>
                <plugins>

                    <!-- Create or merge domain.xml to add das-config -->
<!--                    <plugin>
                        <groupId>org.codehaus.gmaven</groupId>
                        <artifactId>groovy-maven-plugin</artifactId>
                        <version>2.0</version>
                        <executions>
                            <execution>
                                <id>1</id>
                                <phase>pre-integration-test</phase>
                                <goals>
                                    <goal>execute</goal>
                                </goals>
                                <configuration>
                                    <source>
                                        <![CDATA[
                                        String dasConfig = "<das-config autodeploy-enabled=\"true\" dynamic-reload-enabled=\"true\" deploy-xml-validation=\"full\" autodeploy-dir=\"${payara-micro.deployDir}\" />"
                                        
                                        println("==== Java EE servers parent maven (Payara Micro) ====");
                                        File deployDir = new File("${payara-micro.deployDir}");
                                        deployDir.mkdirs();

                                        println("Das config looking for deployments in ${payara-micro.deployDir}");
                                        File targetDir = new File("${project.build.directory}");
                                        if(targetDir.exists() && !targetDir.isDirectory()) {
                                            println("Target dir does not exist, wont create domain.xml !");
                                            return;
                                        }
                                        File domainXmlFile = new File(targetDir,"domain.xml");

                                        String content = null;
                                        if(domainXmlFile.exists() && !domainXmlFile.isDirectory()) {
                                            println("Enhancing existing domain.xml");
                                            BufferedReader reader = new BufferedReader(new FileReader (domainXmlFile));
                                            String line = null;
                                            StringBuilder stringBuilder = new StringBuilder();
                                            String ls = System.getProperty("line.separator");

                                            try {
                                                while((line = reader.readLine()) != null) {
                                                    stringBuilder.append(line);
                                                    stringBuilder.append(ls);
                                                }
                                                content = stringBuilder.toString();
                                            } finally {
                                                reader.close();
                                            }
                                        }else{
                                            String defaultUrl = "https://raw.githubusercontent.com/payara/Payara/master/appserver/extras/payara-micro/payara-micro-boot/src/main/resources/MICRO-INF/domain/domain.xml";
                                            println("Creating domain.xml from " + defaultUrl);
                                            content = new URL(defaultUrl).getText()
                                        }
                                        
                                        content = content.replaceAll("<das-config></das-config>", dasConfig);
                                        BufferedWriter writer = new BufferedWriter(new FileWriter(domainXmlFile));

                                        writer.write(content);
                                        writer.close();
                                        ]]>
                                    </source>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                    -->
                
                    <plugin>
                        <groupId>fish.payara.maven.plugins</groupId>
                        <artifactId>payara-micro-maven-plugin</artifactId>
                        <configuration>
                            <useUberJar>false</useUberJar>
                            <daemon>false</daemon>
                            <deployWar>true</deployWar>
                        </configuration>
                        <executions>
                            <execution>
                                <id>1</id>
                                <phase>pre-integration-test</phase>
                                <goals>
                                    <goal>start</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
        
        <!-- Deploy to Yellow Raspberry Pi -->
        <profile>
            <id>yellow-pi</id>
            <activation>
                <property>
                    <name>yellow-pi</name>
                </property>
            </activation>
            
            <build>
            
                <plugins>
                   
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-antrun-plugin</artifactId>
                        
                        <executions>
                            <execution>
                                <id>redeploy</id>
                                <phase>install</phase>
                                <configuration>
                                    <target>
                                        
                                        <!-- Copy the new version -->
                                        <scp file="${project.build.directory}/${project.build.finalName}.war" 
                                             todir="pi:${pi.password}@yellow:/home/pi/microprofile-demo/"
                                             trust="true"
                                        />
                                        
                                        <!-- Start the server -->
                                        <sshexec 
                                            trust="true"
                                            verbose="false"
                                            host="yellow"
                                            username="pi"
                                            password="${pi.password}"
                                            command="sudo systemctl restart membership.service"/>
                                        
                                    </target>
                                </configuration>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                    
                </plugins>
            </build>
        </profile>
    </profiles>
</project>